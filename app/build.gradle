plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId project.APP_APPLICATION_ID
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file(poc_keystore_file)
            keyAlias poc_keystore_alias
            storePassword poc_keystore_password
            keyPassword poc_keystore_password
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/plugin-manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/plugin-manager/release/')
            assets.srcDir('build/generated/assets/plugin-zip/release/')
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation project(path: ':constants')//共同使用的常量库
    implementation 'com.tencent.shadow.core:common'//AndroidLogLoggerFactory
    implementation 'commons-io:commons-io:2.5'//sample-host从assets中复制插件用的
    implementation 'com.tencent.shadow.dynamic:dynamic-host'//腾讯插件框架shadow
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    //E:\AndroidStudioProjects\TencentShadowStudy\app\build\generated\assets\...
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

def generateAssets(generateAssetsTask, buildType) {//以下是自动生成插件
    def moduleName = 'plugin-manager'
    //E:\AndroidStudioProjects\TencentShadowStudy\plugin-manager\build\outputs\apk\debug\plugin-manager-debug.apk
    def pluginManagerApkFile = file("${project(":plugin-manager").getBuildDir()}" + "/outputs/apk/${buildType}/" + "${moduleName}-${buildType}.apk")
    generateAssetsTask.dependsOn createCopyTask(
            ':plugin-manager',
            buildType,
            moduleName,
            'plugin-manager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"//打包apk的任务栈名（编译器自带） assemblePlugin
    )

    //E:\AndroidStudioProjects\TencentShadowStudy\build\plugin-debug.zip
    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")
    generateAssetsTask.dependsOn createCopyTask(
            ':plugin-app',//模块名 TODO
            buildType,//编译版本类型:Debug或者Release
            'plugin-zip',//TODO
            "plugin-${buildType}.zip",//生成的zip名
            pluginZip,//输入文件
            "package${buildType.capitalize()}Plugin"//打包zip的任务栈名（编译器自带） packageDebugPlugin
    )
}

//在task被添加的时候定义依赖关系
tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}
